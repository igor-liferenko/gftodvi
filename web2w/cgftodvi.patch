--- cgftodvi.w
+++ cgftodvi.w
@@ -96,11 +96,30 @@
 The term |print| is used instead of |write| when this program writes on
 the |output| file, so that all such output can be easily deflected.
 
-@d print(...)	write(__VA_ARGS__)
-@d print_ln(X)	write_ln(X)
-@d print_nl(...)	@+{@+write_ln;write(__VA_ARGS__);@+} 
+@d print(...) fprintf(output,__VA_ARGS__)
+@d print_ln(X,...) fprintf(output,X"\n",##__VA_ARGS__)
+@d print_nl(...) { fprintf(output,"\n"); fprintf(output,__VA_ARGS__); }
 
 @p@!
+#include <stdint.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <math.h>
+
+@h
+
+#define odd(X) @[X&1@]
+#define chr(X) @[(unsigned char)X@]
+#define get(file) @[fread(&((file).d),sizeof((file).d),1,(file).f)@]
+#define reset(file,name) @[file.f=fopen(name+1,"r"),file.f!=NULL?get(file):0@]
+#define rewrite(file,name) @[file.f=fopen(name+1,"w")@]
+#define eof(file) @[(file.f==NULL||feof(file.f))@]
+#define eoln(file) @[(file.d=='\n'||feof(file.f))@]
+#define read(file,x) @[x=file.d,get(file)@]
+#define write(file,...) @[fprintf(file.f,__VA_ARGS__)@]
+#define read_ln(file) @[do { while (!eoln(file)) get(file); get(file); } while (0)@]
+
 @<Labels in the outer block@>@;
 @<Constants in the outer block@>@;
 @<Types in the outer block@>@;
@@ -163,12 +182,12 @@
 contains the only non-local |goto| statement in \.{GFtoDVI}.
 @^system dependencies@>
 
-@d abort(...)	@+{@+print( ' ' ,__VA_ARGS__);jump_out();@+} 
-@d bad_gf(X)	abort("Bad GF file: ", X,"! (at byte ", cur_loc-1: 1, ')' )
+@d abort(...)	@+{@+print(" "__VA_ARGS__);jump_out();@+}
+@d bad_gf(X)	abort("Bad GF file: "X"! (at byte %d)", cur_loc-1)
 @.Bad GF file@>
 
 @p void jump_out(void)
-{@+exit(0);
+{@+exit(1);
 } 
 
 @ As in \TeX\ and \MF, this program deals with numeric quantities that
@@ -362,18 +381,19 @@
 no idea what the program is waiting for.) We shall call a system-dependent
 subroutine |update_terminal| in order to avoid this problem.
 
-@d update_terminal	break(output) /*empty the terminal output buffer*/ 
+@d update_terminal	fflush(output) /*empty the terminal output buffer*/
 
 @<Glob...@>=
 uint8_t @!buffer[terminal_line_length+1];
 text_file @!term_in; /*the terminal, considered as an input file*/ 
+FILE *output;
 
 @ A global variable |line_length| records the first buffer position after
 the line just read.
 @^system dependencies@>
 
 @p void input_ln(void) /*inputs a line from the terminal*/ 
-{@+update_terminal;reset(term_in);
+{@+update_terminal;if(!term_in.f)term_in.f=stdin,get(term_in);
 if (eoln(term_in)) read_ln(term_in);
 line_length=0;
 while ((line_length < terminal_line_length)&&!eoln(term_in)) 
@@ -1649,7 +1669,7 @@
 
 @<Glob...@>=
 int @!cur_loc; /*current byte number in |gf_file|*/ 
-uint8_t @!name_of_file0[file_name_size], *const @!name_of_file = @!name_of_file0-1; /*external file name*/ 
+uint8_t @!name_of_file0[file_name_size+1], *const @!name_of_file = @!name_of_file0-1; /*external file name*/
 
 @ It turns out to be convenient to read four bytes at a time, when we are
 inputting from \.{TFM} files. The input goes into global variables
@@ -2157,7 +2177,7 @@
 @d longest_keyword	13
 
 @p void first_string(int @!c)
-{@+if (str_ptr!=c) abort( '?' ); /*internal consistency check*/ 
+{@+if (str_ptr!=c) abort("?"); /*internal consistency check*/
 @.?@>
 while (l > 0) 
   {@+append_char(buffer[l]);decr(l);
@@ -2478,7 +2498,7 @@
 for (j=str_start[n]; j<=str_start[n+1]-1; j++) append_to_name(str_pool[j]);
 for (j=str_start[e]; j<=str_start[e+1]-1; j++) append_to_name(str_pool[j]);
 if (k <= file_name_size) name_length=k;@+else name_length=file_name_size;
-for (k=name_length+1; k<=file_name_size; k++) name_of_file[k]= ' ' ;
+name_of_file[name_length+1]=0;
 } 
 
 @ Now let's consider the routines by which \.{GFtoDVI} deals with file names
@@ -2684,7 +2704,7 @@
 
 @p void write_dvi(dvi_index @!a, dvi_index @!b)
 {@+int k;
-for (k=a; k<=b; k++) write(dvi_file, dvi_buf[k]);
+for (k=a; k<=b; k++) write(dvi_file, "%c", dvi_buf[k]);
 } 
 
 @ To put a byte in the buffer without paying the cost of invoking a procedure
@@ -3211,7 +3231,7 @@
 
 @p void slant_complaint(double @!r)
 {@+if (abs(r-slant_reported) > 0.001) 
-  {@+print_nl("Sorry, I can't make diagonal rules of slant ", r: 10: 5, '!' );
+  {@+print_nl("Sorry, I can't make diagonal rules of slant %10.5f!", r);
 @.Sorry, I can't...@>
   slant_reported=r;
   } 
@@ -3414,9 +3434,9 @@
 
 @d font_change(X)	if (fonts_not_loaded) 
     {@+X;} 
-  else print_nl("(Tardy font change will be ignored (byte ",
+  else print_nl("(Tardy font change will be ignored (byte %d)!)",
 @.Tardy font change...@>
-    cur_loc: 1,")!)")
+    cur_loc)
 
 @<Process a no-op command@>=
 {@+k=interpret_xxx();
@@ -3526,7 +3546,7 @@
 
 @<Store a label@>=
 if ((label_type < '/')||(label_type > '8')) 
-  print_nl("Bad label type precedes byte ", cur_loc: 1, '!' )@;
+  print_nl("Bad label type precedes byte %d!", cur_loc)@;
 @.Bad label type...@>
 else{@+p=get_avail();next[label_tail]=p;label_tail=p;@/
   lab_typ[p]=label_type;info[p]=cur_string;@/
@@ -3546,13 +3566,13 @@
 @<Finish reading the parameters of the |boc|@>;
 @<Get ready to convert \MF\ coordinates to \.{DVI} coordinates@>;
 @<Output the |bop| and the title line@>;
-print( '[' , total_pages: 1);update_terminal; /*print a progress report*/ 
+print("[%d", total_pages);update_terminal; /*print a progress report*/
 @<Output all rules for the current character@>;
 @<Output all labels for the current character@>;
 do_pixels();
 dvi_out(eop); /*finish the page*/ 
 @<Adjust the maximum page width@>;
-print( ']' );update_terminal;
+print("]");update_terminal;
 } 
 
 @ @<Finish reading the parameters of the |boc|@>=
@@ -4219,15 +4239,15 @@
 
 @ @d do_skip	z=0;paint_black=false
 @d end_with(X)	{@+X;cur_gf=get_byte();goto done1;@+} 
-@d five_cases(X)	X: X: case 1: X: case 2: X: case 3: X: case 4
-@d eight_cases(X)	X: X: case 1: X: case 2: X: case 3: X: case 4: X: case 5: X: case 6: X: case 7
-@d thirty_two_cases(X)	eight_cases(X): eight_cases(X: case 8): 
-  eight_cases(X: case 16): eight_cases(X: case 24)
-@d sixty_four_cases(X)	thirty_two_cases(X): thirty_two_cases(X: case 32)
+@d five_cases(X)	case X: case X+1: case X+2: case X+3: case X+4
+@d eight_cases(X)	case X: case X+1: case X+2: case X+3: case X+4: case X+5: case X+6: case X+7
+@d thirty_two_cases(X)	eight_cases(X): eight_cases(X+8):
+  eight_cases(X+16): eight_cases(X+24)
+@d sixty_four_cases(X)	thirty_two_cases(X): thirty_two_cases(X+32)
 
 @<Read and process...@>=
 loop@+{@+resume: switch (cur_gf) {
-  sixty_four_cases(case 0): k=cur_gf;@+break;
+  sixty_four_cases(0): k=cur_gf;@+break;
   case paint1: k=get_byte();@+break;
   case paint2: k=get_two_bytes();@+break;
   case paint3: k=get_three_bytes();@+break;
@@ -4236,8 +4256,8 @@
   case skip1: end_with(blank_rows=get_byte();do_skip)@;
   case skip2: end_with(blank_rows=get_two_bytes();do_skip)@;
   case skip3: end_with(blank_rows=get_three_bytes();do_skip)@;
-  sixty_four_cases(case new_row_0): sixty_four_cases(case new_row_0+64): 
-   thirty_two_cases(case new_row_0+128): five_cases(case new_row_0+160): 
+  sixty_four_cases(new_row_0): sixty_four_cases(new_row_0+64):
+   thirty_two_cases(new_row_0+128): five_cases(new_row_0+160):
     end_with(z=cur_gf-new_row_0;paint_black=true)@;
   case xxx1: case xxx2: case xxx3: case xxx4: case yyy: case no_op: {@+skip_nop();goto resume;
     } 
@@ -4301,7 +4321,9 @@
 Now we are ready to put it all together. This is where \.{GFtoDVI} starts,
 and where it ends.
 
-@p int main(void) {initialize(); /*get all variables initialized*/ 
+@p int main(int argc, char **argv) { if (argc != 2) return 2;
+if ((output=fopen(argv[1],"w"))==NULL) return 2;
+initialize(); /*get all variables initialized*/
 @<Initialize the strings@>;
 start_gf(); /*open the input and output files*/ 
 @<Process the preamble@>;
